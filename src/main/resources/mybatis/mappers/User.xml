<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.roommake.user.mapper.UserMapper">

    <resultMap type="com.roommake.user.vo.User" id="UserResultMap">
        <id column="user_id" property="id"/>
        <result column="user_email" property="email"/>
        <result column="user_password" property="password"/>
        <result column="user_nickname" property="nickname"/>
        <result column="user_profile_photo" property="profilePhoto"/>
        <result column="user_tel" property="tel"/>
        <result column="user_birth_date" property="birthDate"/>
        <result column="user_introduction" property="introduction"/>
        <result column="user_sns" property="sns"/>
        <result column="user_create_date" property="createDate"/>
        <result column="user_update_date" property="updateDate"/>
        <result column="user_delete_date" property="deleteDate"/>
        <result column="user_unique_recommend_code" property="uniqueRecommendCode"/>
        <result column="user_social_yn" property="socialYn"/>
        <result column="user_status" property="status"/>
        <result column="user_point" property="point"/>
        <result column="user_address" property="address"/>
        <result column="user_complaint_count" property="complaintCount"/>
        <result column="following_count" property="followingCount"/>
        <result column="follower_count" property="followerCount"/>
        <result column="user_option_recommend_code" property="optionRecommendCode"/>
        <association property="userGrade" javaType="com.roommake.user.vo.UserGrade">
            <id column="user_grade_id" property="id"/>
            <result column="user_grade_name" property="name"/>
        </association>
    </resultMap>

    <!-- 모든 유저 조회 -->
    <select id="getAllUsers" resultMap="UserResultMap">
        SELECT *
        FROM user
    </select>


    <!-- 이메일로 유저 조회 -->
    <select id="getUserByEmail" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE user_email = #{email}
    </select>

    <!-- 이메일로 사용자 및 권한 조회 -->
    <select id="getUserByEmailWithRoles" resultType="map">
        SELECT u.user_id, u.user_email, u.user_password, u.user_nickname, GROUP_CONCAT(ur.user_role_name) AS roles,
               u.user_status
        FROM user u
                 JOIN user_role ur ON u.user_id = ur.user_id
        WHERE u.user_email = #{email}
        GROUP BY u.user_id, u.user_email, u.user_password, u.user_nickname, u.user_status
    </select>

    <!-- 아이디으로 유저 조회 -->
    <select id="getUserById" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE user_id = #{id}
    </select>

    <!-- 닉네임으로 유저 조회 -->
    <select id="getUserByNickname" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE user_nickname = #{nickname}
    </select>

    <!-- 추천인으로 유저 조회 -->
    <select id="getUserByRecommendCode" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE user_unique_recommend_code = #{recommendCode}
    </select>

    <!-- 추천인 코드 중복 체크 -->
    <select id="existRecommendCode" parameterType="String" resultType="boolean">
        SELECT EXISTS(SELECT 1
                      FROM user
                      WHERE user_unique_recommend_code = #{uniqueRecommendCode})
    </select>

    <!-- 유저 등록 -->
    <insert id="createUser" parameterType="com.roommake.user.vo.User">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID() AS no
        </selectKey>
        INSERT INTO user (user_email, user_password, user_nickname, user_unique_recommend_code, user_option_recommend_code, user_profile_photo)
        VALUES (#{email}, #{password}, #{nickname}, #{uniqueRecommendCode}, #{optionRecommendCode}, #{profilePhoto})
    </insert>

    <resultMap id="termResultMap" type="com.roommake.user.vo.Term">
        <id column="term_id" property="id"/>
        <result column="term_title" property="title"/>
        <result column="term_content" property="content"/>
        <result column="term_create_date" property="createDate"/>
        <result column="term_update_date" property="updateDate"/>
        <result column="term_delete_date" property="deleteDate"/>
        <result column="term_delete_yn" property="deleteYn"/>
        <result column="term_require_yn" property="requireYn"/>
    </resultMap>

    <!-- 모든 약관 불러오기 -->
    <select id="getAllTerms" resultMap="termResultMap">
        SELECT term_id, term_title, term_content, term_create_date, term_update_date, term_delete_date, term_delete_yn, term_require_yn
        FROM term
        WHERE term_delete_yn = 'N'
    </select>

    <!-- 사용자 약관 동의 저장 -->
    <insert id="createTermAgreement" parameterType="com.roommake.user.vo.TermAgreement">
        INSERT INTO
            term_agreement(agree1, agree2, agree3, user_id, term_id, term_agreement_create_date, term_agreement_update_date)
        VALUES
            (#{agree1}, #{agree2}, #{agree3}, #{user.id}, #{term.id}, NOW(), NOW())
    </insert>

    <!-- 약관 ID로 약관 정보를 조회 -->
    <select id="getTermById" parameterType="int" resultMap="termResultMap">
        SELECT term_id, term_title, term_content, term_create_date, term_update_date, term_delete_date, term_delete_yn, term_require_yn
        FROM term
        WHERE term_id = #{id}
    </select>

    <!-- 추천인 코드로 유저 검색 -->
    <select id="getByRecommendCode" parameterType="String" resultMap="UserResultMap">
        SELECT *
        FROM user
        WHERE user_unique_recommend_code = #{recommendCode}
    </select>

    <!-- 신규 가입자에게 포인트 적립 -->
    <insert id="addPlusPointForNewUser" parameterType="com.roommake.user.vo.PlusPointHistory">
        INSERT INTO
            plus_point_history (plus_point_amount, plus_point_create_date, plus_point_expire_date, user_id, point_balance, point_type_id)
        VALUES
            (#{amount}, NOW(), #{expireDate}, #{user.id}, #{balance}, #{pointType.id})
    </insert>

    <!-- 기존 회원에게 포인트 적립 -->
    <insert id="addPlusPointForExistUser" parameterType="com.roommake.user.vo.PlusPointHistory">
        INSERT INTO
            plus_point_history (plus_point_amount, plus_point_create_date, plus_point_expire_date, user_id, point_balance, point_type_id)
        VALUES
            (#{amount}, NOW(), #{expireDate}, #{user.id}, #{balance}, #{pointType.id})
    </insert>

    <!-- 기존 회원의 포인트 잔액 업데이트 -->
    <update id="modifyUserPoint">
        UPDATE user
        SET user_point = user_point + #{point}
        WHERE user_id = #{id}
    </update>

    <!-- 신규 회원 포인트 잔액 업데이트 -->
    <update id="modifyNewUserPoint">
        UPDATE user
        SET user_point = #{point}
        WHERE user_id = #{id}
    </update>

    <!-- 이메일 중복 체크 -->
    <select id="ExistEmail" parameterType="String" resultType="boolean">
        SELECT EXISTS(SELECT 1 FROM user WHERE user_email = #{email})
    </select>

    <!-- 유저 회원정보 수정-->
    <update id="modifyUser" parameterType="com.roommake.user.vo.User">
        update
            user
        set
            user_profile_photo = #{profilePhoto},
            user_nickname = #{nickname},
            user_email = #{email},
            user_birth_date = #{birthDate},
            user_introduction = #{introduction},
            user_sns = #{sns},
            user_status = #{status},
            user_point = #{point}
        WHERE user_email = #{email}
    </update>

    <!-- 페이징 정렬 검색 등 조건 들어간 유저 목록 조회 -->
    <select id="getUsers" parameterType="com.roommake.dto.Criteria" resultMap="UserResultMap">
        select
            *
        from
        (select
            u.user_id,
            u.user_email,
            u.user_nickname,
            u.user_grade_id,
            g.user_grade_name,
            u.user_status,
            u.user_point,
            u.user_create_date,
            u.user_update_date,
            @rownum := @rownum + 1 as row_num
        from
            (select @rownum := 0) r,
            user u
            left join user_grade g on u.user_grade_id = g.user_grade_id
        <where>
            <if test="'email' == opt">
                and u.user_email like CONCAT('%', #{keyword}, '%')
            </if>
            <if test="'nickname' == opt">
                and u.user_nickname like CONCAT('%', #{keyword}, '%')
            </if>
            <choose>
                <when test='filt == "active"'>
                    and u.user_status = 'active'
                </when>
                <when test='filt == "block"'>
                    and u.user_status = 'block'
                </when>
                <when test='filt == "delete"'>
                    and u.user_status = 'delete'
                </when>
            </choose>
                and (u.user_status in('active', 'block', 'delete'))
        </where>
        order by
        <choose>
            <when test="sort == 'date'">
                u.user_id desc
            </when>
            <when test="sort == 'nickname'">
                u.user_nickname asc
            </when>
            <when test="sort == 'grade'">
                u.user_grade_id desc
            </when>
        </choose>
        ) as user
        where
            row_num between #{begin} and #{end}
    </select>

    <!-- 조건에 맞는 유저 전체 수 조회 -->
    <select id="getTotalRows" parameterType="com.roommake.dto.Criteria" resultType="int">
        select count(*)
        from
            user
        <where>
            <if test="'email' == opt">
                and user_email like CONCAT('%', #{keyword}, '%')
            </if>
            <if test="'nickname' == opt">
                and user_nickname like CONCAT('%', #{keyword}, '%')
            </if>
            <if test='filt == "active"'>
                and user_status = 'active'
            </if>
            <if test='filt == "block"'>
                and user_status = 'block'
            </if>
            <if test='filt == "delete"'>
                and user_status = 'delete'
            </if>
                and (user_status in('active', 'block', 'delete'))
        </where>
    </select>

    <!-- 유저의 모든 스크랩 조회 -->
    <select id="getAllScraps" resultMap="AllScrap">
        SELECT
            'Product' AS type,
            ps.product_id AS itemId,
            pi.product_image_name AS imageName,
            ps.product_scrap_create_date AS create_date,
            ps.product_scrap_update_date AS update_date,
            sf.scrap_folder_name AS foldName
        FROM
            product_scrap ps
                INNER JOIN product_image pi ON ps.product_id = pi.product_id
                INNER JOIN scrap_folder sf ON ps.scrap_folder_id = sf.scrap_folder_id
                INNER JOIN product p ON ps.product_id = p.product_id
        WHERE
            ps.user_id = #{userId}
        AND ps.product_scrap_delete_yn = 'N'
          AND p.product_delete_yn = 'N'

        UNION

        SELECT
            'Community' AS type,
            cs.comm_id AS itemId,
            c.comm_image_name AS imageName,
            cs.comm_scrap_create_date AS create_date,
            cs.comm_scrap_update_date AS update_date,
            sf.scrap_folder_name AS foldName
        FROM
            community_scrap cs
                INNER JOIN community c ON cs.comm_id = c.comm_id
                INNER JOIN scrap_folder sf ON cs.scrap_folder_id = sf.scrap_folder_id
        WHERE
            cs.user_id = #{userId}
          AND cs.comm_scrap_delete_yn = 'N'
          AND c.comm_delete_yn = 'N'

        ORDER BY
            create_date DESC
            limit #{offset}, 30
    </select>

    <!-- 유저의 모든 스크랩 수 조회 -->
    <select id="getAllScrapsRows" resultType="int" parameterType="int">
        SELECT
            SUM(total_count) AS total
        FROM (
                 -- Product 스크랩 수 계산
                 SELECT
                     COUNT(*) AS total_count
                 FROM
                     product_scrap ps
                         INNER JOIN product p ON ps.product_id = p.product_id
                 WHERE
                     ps.user_id = #{userId}
                   AND ps.product_scrap_delete_yn = 'N'
                   AND p.product_delete_yn = 'N'

                 UNION ALL

                 -- Community 스크랩 수 계산
                 SELECT
                     COUNT(*) AS total_count
                 FROM
                     community_scrap cs
                         INNER JOIN community c ON cs.comm_id = c.comm_id
                 WHERE
                     cs.user_id = #{userId}
                   AND cs.comm_scrap_delete_yn = 'N'
                   AND c.comm_delete_yn = 'N'
             ) combined_count
    </select>


    <!-- 폴더별 유저의 모든 스크랩 조회 -->
    <select id="getAllScrapsByFolderId" parameterType="map" resultMap="AllScrap">
        SELECT
            'Folder' AS type,
            NULL AS itemId,
            NULL AS imageName,
            NULL AS create_date,
            NULL AS update_date,
            sf.scrap_folder_name AS folderName,
            sf.scrap_folder_description AS description
        FROM
            scrap_folder sf
        WHERE
            sf.scrap_folder_id = #{folderId}
          AND sf.scrap_folder_delete_yn = 'N'
          AND sf.user_id = #{userId}
          AND NOT EXISTS (
            SELECT 1 FROM product_scrap ps
            WHERE ps.scrap_folder_id = sf.scrap_folder_id
              AND ps.product_scrap_delete_yn = 'N'
        )
          AND NOT EXISTS (
            SELECT 1 FROM community_scrap cs
            WHERE cs.scrap_folder_id = sf.scrap_folder_id
              AND cs.comm_scrap_delete_yn = 'N'
        )

        UNION

-- 상품 스크랩 정보
        SELECT
            'Product' AS type,
            ps.product_id AS itemId,
            pi.product_image_name AS imageName,
            ps.product_scrap_create_date AS create_date,
            ps.product_scrap_update_date AS update_date,
            sf.scrap_folder_name AS folderName,
            sf.scrap_folder_description AS description
        FROM
            scrap_folder sf
                LEFT JOIN product_scrap ps ON sf.scrap_folder_id = ps.scrap_folder_id
                LEFT JOIN product p ON ps.product_id = p.product_id
                LEFT JOIN product_image pi ON ps.product_id = pi.product_id
        WHERE
            sf.scrap_folder_id = #{folderId}
          AND sf.scrap_folder_delete_yn = 'N'
          AND sf.user_id = #{userId}
          AND ps.product_scrap_delete_yn = 'N'
          AND p.product_delete_yn = 'N'
          AND ps.user_id = #{userId}

        UNION

-- 커뮤니티 스크랩 정보
        SELECT
            'Community' AS type,
            cs.comm_id AS itemId,
            c.comm_image_name AS imageName,
            cs.comm_scrap_create_date AS create_date,
            cs.comm_scrap_update_date AS update_date,
            sf.scrap_folder_name AS folderName,
            sf.scrap_folder_description AS description
        FROM
            scrap_folder sf
                LEFT JOIN community_scrap cs ON sf.scrap_folder_id = cs.scrap_folder_id
                LEFT JOIN community c ON cs.comm_id = c.comm_id
        WHERE
            sf.scrap_folder_id = #{folderId}
          AND sf.scrap_folder_delete_yn = 'N'
          AND sf.user_id = #{userId}
          AND cs.comm_scrap_delete_yn = 'N'
          AND c.comm_delete_yn = 'N'
          AND cs.user_id = #{userId}

        ORDER BY
            create_date DESC

            limit #{offset}, 30
    </select>

    <resultMap id="AllScrap" type="com.roommake.user.dto.AllScrap">
        <result property="type" column="type" />
        <result property="itemId" column="itemId" />
        <result property="imageName" column="imageName" />
        <result property="description" column="description" />
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
        <result property="folderName" column="folderName" />
        <result property="folderId" column="folderId" />
    </resultMap>

    <!-- 폴더별 스크랩 행 조회 -->
    <select id="getAllScrapsByFolderIdRows" parameterType="int" resultType="com.roommake.user.dto.FolderScrapCountDto">
        select count(p_cnt) productCount,
               count(c_cnt) communityCount,
                count(*) totalCount
        from (
                 select  product_id p_cnt, null c_cnt
                 from product_scrap p
                 where p.scrap_folder_id = #{folderId}
                   and p.user_id = #{userId}
                 union
                 select null, comm_id
                 from community_scrap c
                 where c.scrap_folder_id = #{folderId}
                   and c.user_id = #{userId}) scrap;
    </select>

    <!-- 폴더명 및 폴더 별 대표 이미지 조회 -->
    <select id="getScrapFolders" parameterType="int" resultMap="AllScrap">
        WITH ScrapData AS (
            SELECT
                'Product' AS type,
                sf.scrap_folder_id AS folderId,
                sf.scrap_folder_name AS folderName,
                sf.scrap_folder_create_date AS folderCreateDate,
                ps.product_id AS itemId,
                pi.product_image_name AS imageName,
                ps.product_scrap_create_date AS create_date
            FROM
                scrap_folder sf
                    LEFT JOIN
                product_scrap ps ON sf.scrap_folder_id = ps.scrap_folder_id AND ps.product_scrap_delete_yn = 'N'
                    LEFT JOIN
                product_image pi ON ps.product_id = pi.product_id
            WHERE
                sf.user_id = #{id} AND sf.scrap_folder_delete_yn = 'N'

            UNION ALL

            SELECT
                'Community' AS type,
                sf.scrap_folder_id AS folderId,
                sf.scrap_folder_name AS folderName,
                sf.scrap_folder_create_date AS folderCreateDate,
                cs.comm_id AS itemId,
                c.comm_image_name AS imageName,
                cs.comm_scrap_create_date AS create_date
            FROM
                scrap_folder sf
                    LEFT JOIN
                community_scrap cs ON sf.scrap_folder_id = cs.scrap_folder_id AND cs.comm_scrap_delete_yn = 'N'
                    LEFT JOIN
                community c ON cs.comm_id = c.comm_id
            WHERE
                sf.user_id = #{id} AND sf.scrap_folder_delete_yn = 'N'
        ),

             FinalSelection AS (
                 SELECT
                     type,
                     folderId,
                     folderName,
                     folderCreateDate,
                     itemId,
                     imageName,
                     create_date,
                     ROW_NUMBER() OVER (PARTITION BY folderId ORDER BY create_date DESC) AS final_rn
                 FROM
                     ScrapData
             )

        SELECT
            type,
            folderId,
            folderName,
            itemId,
            imageName,
            create_date
        FROM
            FinalSelection
        WHERE
            final_rn = 1
        ORDER BY
            CASE
                WHEN folderName = '기본 폴더' THEN 0
                ELSE 1
                END,
            folderCreateDate DESC
            limit #{offset}, 30
    </select>

    <select id="getScrapFoldersRows" parameterType="int" resultType="int">
        WITH ScrapData AS (
            SELECT
                'Product' AS type,
                sf.scrap_folder_id AS folderId,
                sf.scrap_folder_name AS folderName,
                sf.scrap_folder_create_date AS folderCreateDate,
                ps.product_id AS itemId,
                pi.product_image_name AS imageName,
                ps.product_scrap_create_date AS create_date
            FROM
                scrap_folder sf
                    LEFT JOIN
                product_scrap ps ON sf.scrap_folder_id = ps.scrap_folder_id AND ps.product_scrap_delete_yn = 'N'
                    LEFT JOIN
                product_image pi ON ps.product_id = pi.product_id
            WHERE
                sf.user_id = #{id} AND sf.scrap_folder_delete_yn = 'N'
            UNION ALL
            SELECT
                'Community' AS type,
                sf.scrap_folder_id AS folderId,
                sf.scrap_folder_name AS folderName,
                sf.scrap_folder_create_date AS folderCreateDate,
                cs.comm_id AS itemId,
                c.comm_image_name AS imageName,
                cs.comm_scrap_create_date AS create_date
            FROM
                scrap_folder sf
                    LEFT JOIN
                community_scrap cs ON sf.scrap_folder_id = cs.scrap_folder_id AND cs.comm_scrap_delete_yn = 'N'
                    LEFT JOIN
                community c ON cs.comm_id = c.comm_id
            WHERE
                sf.user_id = #{id} AND sf.scrap_folder_delete_yn = 'N'
        ),
             FinalSelection AS (
                 SELECT
                     type,
                     folderId,
                     folderName,
                     folderCreateDate,
                     itemId,
                     imageName,
                     create_date,
                     ROW_NUMBER() OVER (PARTITION BY folderId ORDER BY create_date DESC) AS final_rn
                 FROM
                     ScrapData
             )
        SELECT
            COUNT(*) AS total_count
        FROM
            FinalSelection
        WHERE
            final_rn = 1;
    </select>

    <!--유저의 모든 상품 스크랩 조회-->
    <select id="getProductScraps" parameterType="int" resultMap="UserProductScrap">
        SELECT
        p.product_id AS productId,
        pi.product_image_name AS productImageName,
        p.product_name AS productName,
        p.product_price AS productPrice,
        p.product_discount AS productDiscount,
        pc.product_category_name AS categoryName
        FROM
        product_scrap ps
        JOIN
        product p ON ps.product_id = p.product_id
        LEFT JOIN
        product_image pi ON p.product_id = pi.product_id
        LEFT JOIN
        product_category pc ON p.category_id = pc.product_category_id
        WHERE
        ps.user_id = #{userId}
        <if test="catId != 0">
            and p.category_id in (select category_id
            from product_category x
            where x.parents_product_category_id = #{catId})
        </if>
        AND
        ps.product_scrap_delete_yn = 'N'
        AND
        p.product_delete_yn = 'N'
        AND
        p.product_status_yn = 'Y'
        ORDER BY
        ps.product_scrap_create_date DESC
        LIMIT #{offset}, 30
    </select>

    <resultMap id="UserProductScrap" type="com.roommake.user.dto.UserProductScrap">
        <result property="productId" column="productId" />
        <result property="productImageName" column="productImageName" />
        <result property="productName" column="productName" />
        <result property="productPrice" column="productPrice" />
        <result property="productDiscount" column="productDiscount" />
        <result property="categoryName" column="categoryName" />
    </resultMap>
    
    <!-- 유저의 모든 상품 커뮤니티 총 개수 조회 -->
    <select id="getProductRows" resultType="int" parameterType="int">
        SELECT
        COUNT(*) AS totalCount
        FROM
        product_scrap ps
        JOIN
        product p ON ps.product_id = p.product_id
        LEFT JOIN
        product_image pi ON p.product_id = pi.product_id
        LEFT JOIN
        product_category pc ON p.category_id = pc.product_category_id
        WHERE
        ps.user_id = #{userId}
        <if test="catId != 0">
            AND p.category_id IN (SELECT category_id
            FROM product_category x
            WHERE x.parents_product_category_id = #{catId})
        </if>
        AND ps.product_scrap_delete_yn = 'N'
        AND p.product_delete_yn = 'N'
        AND p.product_status_yn = 'Y';

    </select>

    <!-- 유저의 모든 커뮤니티 스크랩 조회 -->
    <select id="getCommunityScraps" parameterType="int" resultType="com.roommake.user.dto.UserCommScrap">
        SELECT
            c.comm_id AS communityId,
            c.comm_image_name AS communityImage,
            c.comm_title AS communityTitle,
            u.user_id AS authorId,
            u.user_nickname AS authorName,
            c.comm_create_date AS createDate,
            c.comm_view_count AS viewCount,
            c.comm_like_count AS likeCount,
            cc.comm_category_name AS categoryName
        FROM
            community_scrap cs
                JOIN
            community c ON cs.comm_id = c.comm_id
                JOIN
            community_category cc ON c.comm_category_id = cc.comm_category_id
                JOIN
            user u ON c.user_id = u.user_id
                JOIN
            scrap_folder sf ON cs.scrap_folder_id = sf.scrap_folder_id
        WHERE
            cs.user_id = #{id}
        <if test="catId != 0">
            and c.comm_category_id = #{catId}
        </if>
          AND
            cs.comm_scrap_delete_yn = 'N'
          AND
            c.comm_delete_yn = 'N'
          AND
            c.comm_status = 'active'
        LIMIT #{offset}, 30
    </select>

    <resultMap id="UserCommScrap" type="com.roommake.user.dto.UserCommScrap">
        <result property="communityId" column="communityId" />
        <result property="communityImage" column="communityImage" />
        <result property="communityTitle" column="communityTitle" />
        <result property="authorId" column="authorId" />
        <result property="authorName" column="authorName" />
        <result property="createDate" column="createDate" />
        <result property="viewCount" column="viewCount" />
        <result property="likeCount" column="likeCount" />
        <result property="categoryName" column="categoryName" />
    </resultMap>

    <!-- 커뮤니티 스크랩 행 조회 -->
    <select id="getCommunityScrapRows" resultType="int" parameterType="int">
        SELECT COUNT(*)
        FROM community_scrap cs
        JOIN community c ON cs.comm_id = c.comm_id
        JOIN community_category cc ON c.comm_category_id = cc.comm_category_id
        JOIN user u ON c.user_id = u.user_id
        JOIN scrap_folder sf ON cs.scrap_folder_id = sf.scrap_folder_id
        WHERE cs.user_id = #{id}
        <if test="catId != 0">
            AND c.comm_category_id = #{catId}
        </if>
        AND cs.comm_scrap_delete_yn = 'N'
        AND c.comm_delete_yn = 'N'
        AND c.comm_status = 'active';
    </select>

    <!-- 상품 스크랩을 기본 폴더로 이동 -->
    <update id="modifyProductScrapToDefaultFolder" parameterType="int">
        UPDATE product_scrap ps
            INNER JOIN scrap_folder sf ON ps.scrap_folder_id = sf.scrap_folder_id
            INNER JOIN scrap_folder default_sf ON default_sf.scrap_folder_name = '기본 폴더'
            SET ps.scrap_folder_id = default_sf.scrap_folder_id
        WHERE sf.scrap_folder_id = #{folderId}
          AND ps.user_id = #{userId}
          AND ps.product_scrap_delete_yn = 'N';
    </update>

    <!-- 커뮤니티 스크랩을 기본 폴더로 이동 -->
    <update id="modifyCommunityScrapToDefaultFolder" parameterType="int">
        UPDATE
            community_scrap cs
        INNER JOIN
            scrap_folder sf ON cs.scrap_folder_id = sf.scrap_folder_id
        INNER JOIN
            scrap_folder default_sf ON default_sf.scrap_folder_name = '기본 폴더'
        SET
            cs.scrap_folder_id = default_sf.scrap_folder_id
        WHERE
            sf.scrap_folder_id = #{folderId}
        AND
            cs.user_id = #{userId}
        AND
            cs.comm_scrap_delete_yn = 'N';

    </update>

    <!-- 스크랩 폴더 삭제 -->
    <update id="deleteScrapFolder" parameterType="int">
        UPDATE
            scrap_folder
        SET
            scrap_folder_delete_yn = 'Y',
            scrap_folder_delete_date = NOW()
        WHERE
            scrap_folder_id = #{folderId}
        AND
            user_id = #{userId}
        AND
            scrap_folder_delete_yn = 'N'
    </update>

    <!-- 특정 아이템을 다른 폴더로 이동 -->
    <update id="modifyScrapItemToFolder">
        <choose>
            <when test="type == 'Product'">
                UPDATE product_scrap
                SET scrap_folder_id = #{targetFolderId}
                WHERE product_id = #{itemId}
                AND user_id = #{userId}
                AND product_scrap_delete_yn = 'N'
            </when>
            <when test="type == 'Community'">
                UPDATE community_scrap
                SET scrap_folder_id = #{targetFolderId}
                WHERE comm_id = #{itemId}
                AND user_id = #{userId}
                AND comm_scrap_delete_yn = 'N'
            </when>
        </choose>
    </update>

    <!-- 특정 아이템을 삭제 -->
    <update id="deleteScrapItem">
        <choose>
            <when test="type == 'Product'">
                UPDATE product_scrap
                SET
                product_scrap_delete_yn = 'Y',
                product_scrap_delete_date = NOW()
                WHERE
                product_id = #{itemId}
                AND user_id = #{userId}
            </when>
            <when test="type == 'Community'">
                UPDATE community_scrap
                SET
                comm_scrap_delete_yn = 'Y',
                comm_scrap_delete_date = NOW()
                WHERE
                comm_id = #{itemId}
                AND user_id = #{userId}
            </when>
        </choose>
    </update>

    <!-- 스크랩 폴더 이름 및 설명 수정 -->
    <update id="modifyScrapFolder" parameterType="map">
        UPDATE scrap_folder
        SET scrap_folder_name = #{folderName}, scrap_folder_description = #{folderDescription}
        WHERE scrap_folder_id = #{folderId}
          AND user_id = #{userId}
          AND scrap_folder_delete_yn = 'N';
    </update>

    <!-- 새로운 스크랩 폴더 추가 -->
    <insert id="addScrapFolder" parameterType="map">
        INSERT INTO scrap_folder
            (scrap_folder_name, scrap_folder_description, user_id)
        VALUES
            (#{folderName}, #{folderDescription}, #{userId})
    </insert>

    <!-- 회원 신고 카운트 누적 -->
    <update id="modifyUserComplaintCount" parameterType="com.roommake.user.vo.User">
        update
            user
        set
            user_complaint_count = #{complaintCount}
        <if test="complaintCount >= 5">
            and user_status = 'block'
        </if>
        where
            user_id = #{id}
    </update>

    <!-- 회원가입시 기본폴더 생성 -->
    <insert id="createDefaultFolder" parameterType="int">
        INSERT INTO scrap_folder
            (scrap_folder_name, user_id)
        VALUES
            ('기본 폴더', #{userId})
    </insert>

    <!-- 새 폴더 생성 후 ID를 반환 -->
    <insert id="addScrapFolderReturningId" parameterType="map" keyProperty="folderId" useGeneratedKeys="true">
        INSERT INTO scrap_folder
            (scrap_folder_name, user_id)
        VALUES
            (#{folderName}, #{userId})
    </insert>

    <!-- 마이페이지 포인트 조회 -->
    <select id="getPointHistoryByUserId" resultType="com.roommake.user.dto.PointHistoryDto">
        select
            plus_point_id as id,
            plus_point_amount as amount,
            plus_point_create_date as createDate,
            user_id as userId,
            p.point_type_id as typeId,
            t.point_type_name as typeName,
            pt.point_type_name AS parentTypeName,
            point_reason as reason,
            'plus' as category
        from
            plus_point_history p
            left join point_type t on p.point_type_id = t.point_type_id
            left join point_type pt on t.parents_point_type_id = pt.point_type_id
        where
            user_id = #{userId}
        union all
        select
            minus_point_id as id,
            minus_point_amount as amount,
            minus_point_date as createDate,
            user_id as userId,
            m.point_type_id as typeId,
            t.point_type_name as typeName,
            pt.point_type_name AS parentTypeName,
            minus_point_reason as reason,
            'minus' as category
        from
            minus_point_history m
            left join point_type t on m.point_type_id = t.point_type_id
            left join point_type pt on t.parents_point_type_id = pt.point_type_id
        where
            user_id = #{userId}
        order by
            createDate desc
        <if test='start > 0'>
            limit 5 offset #{start}
        </if>
    </select>

    <select id="getPointBalanceByUserId" parameterType="int" resultType="int">
        select
            sum(case when category = 'plus' then amount else -amount end) as balance
        from (
            select
                plus_point_amount as amount,
                user_id as userId,
                'plus' as category
            from
                plus_point_history
            where
                user_id = #{userId}
            union all
            select
                minus_point_amount as amount,
                user_id as userId,
                'minus' as category
            from
                minus_point_history
            where
                user_id = #{userId}) as point_history
        group by userId
    </select>

    <select id="getTotalPointHistory" parameterType="int">
        select
            sum(count)
        from
            (select
                count(*) as count
            from
                plus_point_history
            where user_id = ${userId}
            union all
            select
                count(*) as count
            from
                minus_point_history
            where
                user_id = ${userId}) as point_history
    </select>
    <!-- 회원 탈퇴 -->
    <update id="deleteUser">
        UPDATE user
        SET user_status = #{status},
            user_point = #{point},
            user_delete_date = NOW()
        WHERE user_email = #{email}
    </update>

    <select id="getTotalScrapCount" parameterType="int" resultType="int">
        SELECT
            (SELECT COUNT(*)
             FROM product_scrap ps
                      JOIN product p ON ps.product_id = p.product_id
             WHERE ps.user_id = #{id}
               AND ps.product_scrap_delete_yn = 'N'
               AND p.product_delete_yn = 'N'
               AND p.product_status_yn = 'Y')
                +
            (SELECT COUNT(*)
             FROM community_scrap cs
                      JOIN community c ON cs.comm_id = c.comm_id
             WHERE cs.user_id = #{id}
               AND cs.comm_scrap_delete_yn = 'N'
               AND c.comm_delete_yn = 'N'
               AND c.comm_status = 'active')
                AS totalScrapCount;
    </select>

    <!-- 유저의 스크랩 개수 조회 -->
    <select id="getScrapCount" parameterType="int" resultType="com.roommake.user.dto.ScrapCountDto">
        select
            community_cnt                as communityCount,
            product_cnt                  as productCount,
            community_cnt + product_cnt  as totalCount,
            folder_cnt                   as folderCount
        from (
                 select (select count(*)
                         from community_scrap
                         where user_id = #{userId}) community_cnt,
                        (select count(*)
                         from product_scrap
                         where  user_id = #{userId}) product_cnt,
                        (select count(*)
                         from scrap_folder
                         where  user_id = #{userId}) folder_cnt) x
    </select>

    <select id="getUserLikes" parameterType="int" resultType="com.roommake.user.dto.LikeDto">
        (SELECT
             c.comm_id AS id,
             c.comm_image_name AS imageName,
             c.comm_title AS title,
             'community' AS type,
             cl.comm_like_create_date AS likeDate
         FROM
             community_like cl
                 INNER JOIN
             community c ON cl.comm_id = c.comm_id
         WHERE
             cl.user_id = #{userId}
           AND c.comm_status = 'active'
           AND c.comm_delete_yn = 'n'
         ORDER BY cl.comm_like_create_date DESC)

        UNION ALL

        (SELECT
             cp.post_id AS id,
             cp.post_image_name AS imageName,
             cp.post_title AS title,
             'channel' AS type,
             cpl.channel_post_like_create_date AS likeDate
         FROM
             channel_post_like cpl
                 INNER JOIN
             channel_post cp ON cpl.post_id = cp.post_id
         WHERE
             cpl.user_id = #{userId}
           AND cp.post_status = 'active'
           AND cp.post_delete_yn = 'n'
         ORDER BY cpl.channel_post_like_create_date DESC)
    </select>

    <!-- 좋아요 개수 총합 조회 쿼리 -->
    <select id="getTotalLikes" resultType="int">
        SELECT
            (SELECT COUNT(*)
             FROM community_like cl
                      INNER JOIN community c ON cl.comm_id = c.comm_id
             WHERE cl.user_id = #{userId}
               AND c.comm_status = 'active'
               AND c.comm_delete_yn = 'n')
                +
            (SELECT COUNT(*)
             FROM channel_post_like cpl
                      INNER JOIN channel_post cp ON cpl.post_id = cp.post_id
             WHERE cpl.user_id = #{userId}
               AND cp.post_status = 'active'
               AND cp.post_delete_yn = 'n')
                AS totalLikes;
    </select>

    <!-- 유저 ID로 암호화된 비밀번호 가져오기 -->
    <select id="getPassword" parameterType="string" resultType="string">
        SELECT user_password
        FROM user
        WHERE user_id = #{userId}
    </select>

    <!-- 새 비밀번호로 업데이트 -->
    <update id="updatePassword" parameterType="map">
        UPDATE user
        SET user_password = #{newPassword}
        WHERE user_id = #{userId}
    </update>




    <select id="getFollow" parameterType="com.roommake.user.vo.Follow" resultType="com.roommake.user.vo.Follow">
        select
            follower_id as "followerUserId",
            followee_id as "followeeUserId"
        from
            follow
        where
            follower_id = #{followerUserId}
            and followee_id = #{followeeUserId}
    </select>

    <insert id="addFollow" parameterType="com.roommake.user.vo.Follow">
        insert into follow
            (follower_id , followee_id)
        values
            (#{followerUserId}, #{followeeUserId})
    </insert>

    <delete id="deleteFollow" parameterType="com.roommake.user.vo.Follow">
        delete from
                follow
        where
            follower_id = #{followerUserId}
            and followee_id = #{followeeUserId}
    </delete>


    <!-- 팔로잉 수 증가 -->
    <update id="addFollowingCount">
        UPDATE user
        SET following_count = following_count + 1
        WHERE user_id = #{followerUserId}
    </update>

    <!-- 팔로워 수 증가 -->
    <update id="addFollowerCount">
        UPDATE user
        SET follower_count = follower_count + 1
        WHERE user_id = #{followeeUserId}
    </update>

    <!-- 팔로잉 수 감소 -->
    <update id="deleteFollowingCount">
        UPDATE user
        SET following_count = following_count - 1
        WHERE user_id = #{followerUserId}
    </update>

    <!-- 팔로워 수 감소 -->
    <update id="deleteFollowerCount">
        UPDATE user
        SET follower_count = follower_count - 1
        WHERE user_id = #{followeeUserId}
    </update>


    <!-- 유저의 리뷰 베스트 순 조회 -->
    <select id="getReviewsByBest" resultType="com.roommake.user.dto.ReviewDto">
        SELECT
            p.product_name                  AS name,
            pi.product_image_name           AS imageName,
            pr.product_review_id            AS id,
            pr.product_review_rating        AS rating,
            pr.product_review_create_date   AS createDate,
            pr.product_review_content       AS content,
            pr.product_review_vote_count    AS voteCount,
            pd.product_detail_size          AS size,
            pd.product_detail_color         AS color
        FROM
            product_review pr
            JOIN order_item oi ON pr.order_item_id = oi.order_item_id
            JOIN product p ON oi.product_id = p.product_id
            LEFT JOIN (
            SELECT product_id, product_image_name,
            ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY product_image_id) as rn
            FROM product_image
            ) pi ON p.product_id = pi.product_id AND pi.rn = 1
            JOIN product_detail pd ON oi.product_detail_id = pd.product_detail_id
        WHERE
            pr.user_id = #{userId}
          AND pr.product_review_delete_date IS NULL
        ORDER BY
            pr.product_review_vote_count DESC,
            pr.product_review_create_date DESC
            limit #{offset}, 10
    </select>

    <!-- 유저의 리뷰 최신순 조회 -->
    <select id="getReviewsByRecent" resultType="com.roommake.user.dto.ReviewDto">
        SELECT
            p.product_name                  AS name,
            pi.product_image_name           AS imageName,
            pr.product_review_id            AS id,
            pr.product_review_rating        AS rating,
            pr.product_review_create_date   AS createDate,
            pr.product_review_content       AS content,
            pr.product_review_vote_count    AS voteCount,
            pd.product_detail_size          AS size,
            pd.product_detail_color         AS color
        FROM
            product_review pr
            JOIN order_item oi ON pr.order_item_id = oi.order_item_id
            JOIN product p ON oi.product_id = p.product_id
            LEFT JOIN (
            SELECT product_id, product_image_name,
            ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY product_image_id) as rn
            FROM product_image
            ) pi ON p.product_id = pi.product_id AND pi.rn = 1
            JOIN product_detail pd ON oi.product_detail_id = pd.product_detail_id
        WHERE
            pr.user_id = #{userId}
          AND pr.product_review_delete_date IS NULL
        ORDER BY
            pr.product_review_vote_count DESC
            limit #{offset}, 10
    </select>

    <select id="getReviewRows" resultType="int" parameterType="int">
        SELECT
            COUNT(*) AS total_rows
        FROM
            product_review pr
                JOIN order_item oi ON pr.order_item_id = oi.order_item_id
                JOIN product p ON oi.product_id = p.product_id
                LEFT JOIN (
                SELECT product_id, product_image_name,
                       ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY product_image_id) as rn
                FROM product_image
            ) pi ON p.product_id = pi.product_id AND pi.rn = 1
                JOIN product_detail pd ON oi.product_detail_id = pd.product_detail_id
        WHERE
            pr.user_id = #{userId}
          AND pr.product_review_delete_date IS NULL;
    </select>

    <!-- 리뷰 삭제 -->
    <update id="deleteReview" parameterType="int">
        UPDATE product_review
        SET product_review_delete_date = NOW()
        WHERE product_review_id = #{reviewId}
          AND user_id = #{userId}
    </update>

</mapper>
